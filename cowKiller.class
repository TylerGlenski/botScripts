package cowKiller;
import org.dreambot.api.methods.Calculations;
import org.dreambot.api.methods.map.Area;
import org.dreambot.api.methods.map.Tile;
import org.dreambot.api.script.AbstractScript;
import org.dreambot.api.script.Category;
import org.dreambot.api.script.ScriptManifest;
import org.dreambot.api.wrappers.interactive.GameObject;
import org.dreambot.api.wrappers.interactive.NPC;
import org.dreambot.api.wrappers.items.GroundItem;

@ScriptManifest(author = "fractal", name = "FractalCowKiller", category = Category.COMBAT, version = 1.0, description = "Kills cows, loots their hides, and banks")

public class CowKiller extends AbstractScript {

    public enum actionTypes {
        walking, interactive, spam, afk
    }

    int walkingShape;
    int runningShape;
    int interactiveShape;
    int spamShape;
    int scale;
    int reaction;   // minimum wait between actions
    int patience;   // minimum wait between running to a new spot while still running. patience is doubled while walking
    int latency = 250;  // how long does it take the game to register your actions? change this depending on CPU/RAM/lag
    Area cowPen = new Area(new Tile(3265, 3296), new Tile(3253, 3255));
    int cowHide = 1739;
    int gate = 1558;

    @Override
    public int onLoop() {
        farmHides();
        return 0;
    }

    public void onStart(){
        reaction = Calculations.random(200,400);
        patience = Calculations.random(1500, 3000);
        walkingShape = Calculations.random(2,5);
        runningShape = Calculations.random(2,4);
        interactiveShape = Calculations.random(2,4);
        spamShape = 1;
        scale = Calculations.random(400,1000);  // proxy for variables in your physical environment affecting your attention
    }

    public int farmHides() {
        String[] targets = {"Cow", "Cow calf"};
        Integer[] loot = {cowHide};
        if (getInventory().isFull()) {
            bankItems(loot, true);
        } else {
            combatLoot(targets, loot, cowPen);
        }
        return 1;
    }

    public void combatLoot(String[] targets, Integer[] loot, Area area) {
        if (!area.contains(getLocalPlayer())) {
            go(area);
        } else if (!getLocalPlayer().isInCombat()){
            NPC target = getNpcs().closest(t -> t!= null && !t.isInCombat() && elem(t.getName(), targets));
            GroundItem prize = getGroundItems().closest(loot);
            if (prize != null && target != null && prize.distance(getLocalPlayer()) < target.distance(getLocalPlayer())) {
                prize.interact("Take");
                sleep(latency);
                sleepUntil(()-> !getLocalPlayer().isMoving(), 60000);
                antiban(actionTypes.interactive);
            } else if (target != null && !getLocalPlayer().isInCombat()) {
                GameObject g = getGameObjects().closest(o -> o.getID() == gate);
                if (!area.contains(target) && g.hasAction("Open")) {
                        g.interact("Open");
                } else if (target.interact("Attack")) {
                	if(!target.isOnScreen()) {
        				getCamera().rotateToEntity(target);
        			}
                    sleepUntil(() -> getLocalPlayer().isInCombat(), 60000);
                    sleepUntil(() -> !getLocalPlayer().isInCombat(), 60000);
                }
                antiban(actionTypes.interactive);
            }
        } else {
            sleepUntil(() -> !getLocalPlayer().isInCombat(), 60000);
        }
    }

    public void bankItems(Integer[] itemIDs, boolean all) {
        if (!getBank().isOpen()) {
            getBank().open(getBank().getClosestBankLocation());
            antiban(actionTypes.interactive);
        } else {
            if (all) {
                getBank().depositAllItems();
                antiban(actionTypes.interactive);
                getBank().close();
                antiban(actionTypes.interactive);
            } else {
                getBank().depositAll(item -> elem(item.getID(), itemIDs));
                antiban(actionTypes.interactive);
                getBank().close();
                antiban(actionTypes.interactive);
            }
        }
    }

    public boolean elem (Object elem, Object[] list){
        for (int i = 0; i < list.length; i++){
            if (list[i].equals(elem)){
                return true;
            }
        }
        return false;
    }

    public void go(Area area) {
        if (!area.contains(getLocalPlayer())) {
            getWalking().walk(area.getRandomTile());
            antiban(actionTypes.walking);
        }
    }

    public void antiban(actionTypes action) {
        if (action == actionTypes.walking) {
            if(getWalking().isRunEnabled()) {
                int time = (int) (Calculations.nextGammaRandom(runningShape, scale)) + patience;
                sleep(latency);
                sleepUntil(() -> !getLocalPlayer().isMoving(), time);
            } else {
                int time = (int) (Calculations.nextGammaRandom(walkingShape, scale)) + patience * 2;
                sleep(latency);
                sleepUntil(() -> !getLocalPlayer().isMoving(), time);
            }
        } else if (action == actionTypes.interactive) {
            int time = (int) (Calculations.nextGammaRandom(interactiveShape, scale)) + reaction;
            sleep(time);
        } else if (action == actionTypes.spam){
            int time = (int) (Calculations.nextGammaRandom(spamShape, scale)) + reaction;
            sleep(time);
        }
    }
}
